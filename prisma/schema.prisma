// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String?
  role          UserRole  @default(user)
  isOAuth       Boolean   @default(false)
  isActive      Boolean   @default(true)
  image         String?
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?
  emailVerified DateTime?
  Account       Account[]
  likes         Like[]
  posts         Post[]
  Session       Session[]
  flags         Flag[]
  comments      Comment[]

  @@index([email])
  @@index([isActive])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean?  @default(false)
  updatedAt DateTime  @default(now()) @updatedAt
  createdAt DateTime  @default(now())
  authorId  String?
  tags      String[]  @default([])
  likes     Like[]
  author    User?     @relation(fields: [authorId], references: [id])
  flags     Flag[]
  comments  Comment[]

  @@index([authorId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flag {
  id        String   @id @default(cuid())
  reason    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  isEdited  Boolean   @default(false)
  postId    String
  authorId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}
